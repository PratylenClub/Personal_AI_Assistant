import osimport speech_recognition as srimport pyttsximport timeimport timestringimport gensimimport pyowmimport vlcimport wikipediafrom Functions import (    get_hour,    get_date,    get_weather,    get_temperatures,    set_a_reminder,    play_the_radio,    stop,    read_RSS_feed,    play_podcast,    read_wikipedia_summary_article,    look_wikipedia_related_articles,    read_full_wikipedia_article,    )from Assistant import personal_assistant,ACTION,PARAMETERS# Weather assistantkey = open("Keys/OWM_KEY.txt","r").read()owm = pyowm.OWM(key,language='en')# Word2Vec# Links for other projects https://github.com/3Top/word2vec-api#where-to-get-a-pretrained-models# https://github.com/facebookresearch/fastText/blob/master/pretrained-vectors.md?utm_campaign=buffer&utm_content=buffer0df9b&utm_medium=social&utm_source=linkedin.comprint "loading brain"word2vec_model = gensim.models.KeyedVectors.load_word2vec_format("Wikipedia_Simple_W2V_model.bin",binary=False)print "brain loaded"# Synthesizerpyttx_engine = pyttsx.init()# Speech recognitionspeech_recognizer = sr.Recognizer()speech_recognition_microphone = sr.Microphone# Radioinstance = vlc.Instance()player = instance.media_player_new()radios = {"france culture": "http://direct.franceculture.fr/live/franceculture-midfi.mp3",          "bolivia": "http://realserver5.megalink.com:8070",          'nostalgie':"http://cdn.nrjaudio.fm/audio1/fr/40039/aac_64.mp3",          'jazz':"http://jazz-wr01.ice.infomaniak.ch/jazz-wr01-128.mp3",          'classique':"http://classiquefm.ice.infomaniak.ch/classiquefm.mp3",          }# RSS readerrss_feeds = {"news": "http://feeds.bbci.co.uk/news/rss.xml?edition=uk#"}number_records_to_read = 10# Play podcastpodcasts_feeds = {'tech news today': 'http://feeds.twit.tv/tnt.xml',                  'france culture': 'feed://radiofrance-podcast.net/podcast09/rss_10351.xml',                  'nature':'http://feeds.nature.com/nature/podcast/current'}podcast_index = 0actions_dict = {"hour" : {ACTION: get_hour, PARAMETERS: (time,)},                "date" : {ACTION: get_date, PARAMETERS: (time,)},                "weather": {ACTION: get_weather, PARAMETERS: (owm,)},                "temperature": {ACTION: get_temperatures, PARAMETERS:(owm,)},                "start radio":{ACTION:play_the_radio, PARAMETERS:(radios,player,instance)},                "stop":{ACTION:stop, PARAMETERS:(player,)},                "rss feed":{ACTION:read_RSS_feed,PARAMETERS:(player, instance,rss_feeds,number_records_to_read)},                "podcast":{ACTION:play_podcast,PARAMETERS:(player,instance,podcasts_feeds,podcast_index)},                "wikipedia full":{ACTION:read_full_wikipedia_article,PARAMETERS:(player,instance,wikipedia)},                "wikipedia summary":{ACTION:read_wikipedia_summary_article,PARAMETERS:(player,instance,wikipedia)},                "wikipedia related":{ACTION:look_wikipedia_related_articles,PARAMETERS:(player,instance,wikipedia)}                }trigger_dict = {"hour": ["hour", "time"],                "date": ["date", "day"],                "weather": ["weather", "climate", "actual temperature"],                "temperature": ["forecast", "temperature latter"],                "start radio":["start radio", "radio on"],                "stop":["stop", "enough" "shut up"],                "rss feed":["feed", "news", "rss"],                "podcast":["podcast", "television"],                "wikipedia full":["read article", "entire article"],                "wikipedia summary":["definition", "summary"],                "wikipedia related":["related"]                }confirmation_threshold = 0.3centroid_shelve_file_name = "centroids_shelve"# Personal Assistantfernand = personal_assistant(word2vec_model,                             pyttx_engine,                             speech_recognition_microphone,                             speech_recognizer,                             actions_dict,                             trigger_dict,                             confirmation_threshold,                             centroid_shelve_file_name)for i in range(10000000):    print i    fernand.interactive_step()