import timestringdef get_date(assistant,time):    date = time.strftime("Day: %A %d. Month: %B. Year: %Y")    assistant.speak(date)    print datedef get_hour(assistant,time):    hour = time.strftime("Hour: %H. Minutes: %M")    assistant.speak(hour)    print hourdef get_weather(assistant, owm):    # change this to infer directly the name of the city from the sentence    assistant.speak("Tell me the city")    city = assistant.active_listen()    print city    obs_list = owm.weather_at_places(str(city),searchtype='like',limit=3)    weather = obs_list[0].get_weather()    assistant.speak("The weather in " +city+ " is: "+ weather.get_detailed_status())    temperature = weather.get_temperature(unit='celsius')     assistant.speak("The actual temperature is: "+str(temperature['temp']) +" degrees.")def get_temperatures(assistant, owm):    # change this to infer directly the name of the city from the sentence    assistant.speak("Tell me the city")    city = assistant.active_listen()    print city    obs_list = owm.weather_at_places(str(city),searchtype='like',limit=3)    weather = obs_list[0].get_weather()    temperature_dict = {"temp_max": "The maximal temperature will be: ", 'temp': "The actual temperature is: ","temp_min": "The minimal temperature will be: "}    temperature = weather.get_temperature(unit='celsius')     temperature_txt = ""    for key in temperature_dict:        temperature_txt += temperature_dict[key] + str(temperature[key]) +" degrees."    assistant.speak(temperature_txt)def set_a_reminder(assistant, reminder_shelve_file_name):    reminders = shelve.open(reminder_shelve_file_name, writeback=True)    assistant.speak("Tell me the date")    msg = assistant.active_listen()    date = timestring.Date(msg).to_unixtime()    print date    assistant.speak("Tell me the message")    msg = assistant.active_listen()    print msg    reminders[date] = msg    reminders.sync()    reminders.close()