import timestringimport shelveimport timeimport feedparserfrom gtts import gTTSDEFAULT_RADIO = "http://direct.franceculture.fr/live/franceculture-midfi.mp3"DEFAULT_RSS = "http://feeds.bbci.co.uk/news/rss.xml?edition=uk#"DEFAULT_PODCAST = "feed://radiofrance-podcast.net/podcast09/rss_10351.xml"def get_date(assistant,time):    date = time.strftime("Day: %A %d. Month: %B. Year: %Y")    assistant.speak(date)    print datedef get_hour(assistant,time):    hour = time.strftime("Hour: %H. Minutes: %M")    assistant.speak(hour)    print hourdef get_weather(assistant, owm):    # change this to infer directly the name of the city from the sentence    assistant.speak("Tell me the city")    city = assistant.active_listen()    assistant.speak("Very good, I sent my assistant to check how is the weather in "+city)    obs_list = owm.weather_at_places(str(city),searchtype='like',limit=3)    weather = obs_list[0].get_weather()    assistant.speak("The weather in " +city+ " is: "+ weather.get_detailed_status())    temperature = weather.get_temperature(unit='celsius')     assistant.speak("The actual temperature is: "+str(temperature['temp']) +" degrees.")def get_temperatures(assistant, owm):    # change this to infer directly the name of the city from the sentence    assistant.speak("Tell me the city")    city = assistant.active_listen()    print city    obs_list = owm.weather_at_places(str(city),searchtype='like',limit=3)    weather = obs_list[0].get_weather()    temperature_dict = {"temp_max": "The maximal temperature will be: ", 'temp': "The actual temperature is: ","temp_min": "The minimal temperature will be: "}    temperature = weather.get_temperature(unit='celsius')     temperature_txt = ""    for key in temperature_dict:        temperature_txt += temperature_dict[key] + str(temperature[key]) +" degrees."    assistant.speak(temperature_txt)def set_a_reminder(assistant, reminder_shelve_file_name):    reminders = shelve.open(reminder_shelve_file_name, writeback=True)    assistant.speak("Tell me the date")    msg = assistant.active_listen()    date = timestring.Date(msg).to_unixtime()    print date    assistant.speak("Tell me the message")    msg = assistant.active_listen()    print msg    reminders[date] = msg    reminders.sync()    reminders.close()def play_the_radio(assistant, radios, player_vlc, instance_vlc):    assistant.speak("Tell the name of the radio")    msg = assistant.active_listen()    if msg in radios.keys():        media = instance_vlc.media_new(radios[msg])    else:        media = instance_vlc.media_new(DEFAULT_RADIO)    player_vlc.set_media(media)    player_vlc.play()def stop(assistant, player):    player.stop()def read_RSS_feed(assistant, player_vlc, instance_vlc, rss_dic, number_records_to_read):    assistant.speak("Tell me the name of the rss feed")    msg = assistant.active_listen()    if msg in rss_dic.keys():        rss = rss_dic[msg]    else:        rss = DEFAULT_RSS    assistant.speak("ok! I am calling my assistant, she will read the RSS feed.")    res = feedparser.parse(rss)    number_records_in_feed = len(res.entries)    if number_records_in_feed < number_records_to_read:        number_records_to_read = number_records_in_feed    entries_to_read = [entry.title_detail.value for entry in res.entries[0:number_records_to_read]]    txt=". ".join(entries_to_read)    tts = gTTS(text=txt,lang='en')    tts.save("rss_read.mp3")    media = instance_vlc.media_new("rss_read.mp3")    player_vlc.set_media(media)    player_vlc.play()    '''    for entry in entries_to_read:            assistant.speak(entry.title_detail.value)        time.sleep(1)    '''def play_podcast(assistant, player_vlc, instance_vlc, podcast_dic, podcast_index=None):    assistant.speak("Tell me the name of the podcast")    msg = assistant.active_listen()    if msg in podcast_dic.keys():        rss = podcast_dic[msg]    else:        rss = DEFAULT_PODCAST    assistant.speak("There you go!")    res = feedparser.parse(rss)    number_records_in_feed = len(res.entries)    if podcast_index is None:        podcast_index = random.randint(0,len(res.entries) - 1)    if number_records_in_feed < podcast_index:        podcast_index = number_records_in_feed    href = ""    for link in res.entries[podcast_index].links:        if ".mp3" in link.href:            href = link.href            break    if href != "":        media = instance_vlc.media_new(href)        player_vlc.set_media(media)        player_vlc.play()    else:        assistant.speak("I am sorry, but the podcast requested is not available!")def speed_change(sound, speed=1.0):    # Manually override the frame_rate. This tells the computer how many    # samples to play per second    sound_with_altered_frame_rate = sound._spawn(sound.raw_data, overrides={        "frame_rate": int(sound.frame_rate * speed)    })    # convert the sound with altered frame rate to a standard frame rate    # so that regular playback programs will work right. They often only    # know how to play audio at standard frame rate (like 44.1k)    return sound_with_altered_frame_rate.set_frame_rate(sound.frame_rate)#slow_sound = speed_change(sound, 0.75)#fast_sound = speed_change(sound, 1.25)#file_handle = fast_sound.export("good2.mp3",#                          format="mp3")#                          tags={"album": "The Bends", "artist": "Radiohead"},#                          cover="/path/to/albumcovers/radioheadthebends.jpg")