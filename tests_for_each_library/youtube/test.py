import urllibimport urllib2from bs4 import BeautifulSoup#from __future__ import unicode_literalsimport youtube_dl"""textToSearch = 'ALDOUS HUXLEY UN MUNDO FELIZ AUDIOLIBRO'query = urllib.quote(textToSearch)url = "https://www.youtube.com/results?search_query=" + queryresponse = urllib2.urlopen(url)html = response.read()soup = BeautifulSoup(html)urls = []for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):    urls.append('https://www.youtube.com' + vid['href'])print urlsydl_opts = {    'format': 'bestaudio/best',    'postprocessors': [{        'key': 'FFmpegExtractAudio',        'preferredcodec': 'mp3',        'preferredquality': '192',    }],}with youtube_dl.YoutubeDL(ydl_opts) as ydl:    ydl.download([urls[0]])"""textToSearch = 'Jose Luis Perales'query = urllib.quote(textToSearch)url = "https://www.youtube.com/results?search_query=" + queryresponse = urllib2.urlopen(url)html = response.read()soup = BeautifulSoup(html)urls = []for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):    urls.append('https://www.youtube.com' + vid['href'])import vlcimport pafyimport pafyimport time#v = pafy.get_playlist(urls[0])v = pafy.new(urls[0])print(v.title)print(v.duration)print(v.rating)print(v.author)print(v.length)print(v.keywords)print(v.thumb)print(v.videoid)print(v.viewcount)print(v.audiostreams)print(v.audiostreams[0].url)print(v.category)print(v.dislikes)print(v.length)print(v.likes)print(v.rating)instance_vlc = vlc.Instance()player_vlc = instance_vlc.media_player_new()#media = instance_vlc.media_new(v.getbestaudio().url)media = instance_vlc.media_new(v.getbest().url)player_vlc.set_media(media)player_vlc.play()"""import timet0 = time.time()i = 0while i < 1000:    should_restart = 1 - player_vlc.is_playing()    time.sleep(1)    if should_restart:        #v = pafy.get_playlist(urls[0]+"?t="+str(int(time.time()-t0)))        v = pafy.new(urls[0]+"?t="+str(int(time.time()-t0)))        media = instance_vlc.media_new(v.getbest().url)        player_vlc.set_media(media)        player_vlc.play()    print iprint mediafor url in urls:    v = pafy.new(urls[0])    print v.getbest().url"""#pafy.get_playlist()plurl = "https://www.youtube.com/watch?v=oS2j-sY9V8Y&list=RDoS2j-sY9V8Y&spfreload=10#t=216"playlist = pafy.get_playlist(plurl)playlist['title']playlist['author']len(playlist['items'])43playlist['items'][21]['pafy']playlist['items'][21]['pafy'].audiostreamsplaylist['items'][21]['pafy'].getbest()playlist['items'][21]['pafy'].getbest().urlimport threadinginstance_vlc = vlc.Instance()player_vlc = instance_vlc.media_player_new()thread = threading.Thread(target=play_youtube_playlist, args=("Jose Luis Perales",instance_vlc,player_vlc))thread.start()PAUSE = 2def play_youtube_playlist(request,instance_vlc,player_vlc ):    textToSearch = 'playlist '+request    urls = query_youtube_video(textToSearch)    for purl in urls:        playlist = pafy.get_playlist(plurl)        for i_video in range(len(playlist['items'])):            v = playlist['items'][i_video]['pafy']            media = instance_vlc.media_new(v.getbest().url)            player_vlc.set_media(media)            player_vlc.play()            time.sleep(v.length + PAUSE)def query_youtube_video(textToSearch):    query = urllib.quote(textToSearch)    url = "https://www.youtube.com/results?search_query=" + query    response = urllib2.urlopen(url)    html = response.read()    soup = BeautifulSoup(html)    urls = []    for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):        urls.append('https://www.youtube.com' + vid['href'])    return urlsdef play_youtube_song(request, instance_vlc,player_vlc):    #modify this in orther to pick the best ranked    url = query_youtube_video(textToSearch)[0]    v = pafy.new(url)    media = instance_vlc.media_new(v.getbest().url)    player_vlc.set_media(media)    player_vlc.play()