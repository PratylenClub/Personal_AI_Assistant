import urllibimport urllib2from bs4 import BeautifulSoupimport youtube_dl"""textToSearch = 'ALDOUS HUXLEY UN MUNDO FELIZ AUDIOLIBRO'query = urllib.quote(textToSearch)url = "https://www.youtube.com/results?search_query=" + queryresponse = urllib2.urlopen(url)html = response.read()soup = BeautifulSoup(html)urls = []for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):    urls.append('https://www.youtube.com' + vid['href'])print urlsydl_opts = {    'format': 'bestaudio/best',    'postprocessors': [{        'key': 'FFmpegExtractAudio',        'preferredcodec': 'mp3',        'preferredquality': '192',    }],}with youtube_dl.YoutubeDL(ydl_opts) as ydl:    ydl.download([urls[0]])"""textToSearch = 'Jose Luis Perales'query = urllib.quote(textToSearch)url = "https://www.youtube.com/results?search_query=" + queryresponse = urllib2.urlopen(url)html = response.read()soup = BeautifulSoup(html)urls = []for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):    urls.append('https://www.youtube.com' + vid['href'])import vlcimport pafyimport pafyimport time#v = pafy.get_playlist(urls[0])v = pafy.new(urls[0])print(v.title)print(v.duration)print(v.rating)print(v.author)print(v.length)print(v.keywords)print(v.thumb)print(v.videoid)print(v.viewcount)print(v.audiostreams)print(v.audiostreams[0].url)print(v.category)print(v.dislikes)print(v.length)print(v.likes)print(v.rating)instance_vlc = vlc.Instance()player_vlc = instance_vlc.media_player_new()#media = instance_vlc.media_new(v.getbestaudio().url)media = instance_vlc.media_new(v.getbest().url)player_vlc.set_media(media)player_vlc.play()"""import timet0 = time.time()i = 0while i < 1000:    should_restart = 1 - player_vlc.is_playing()    time.sleep(1)    if should_restart:        #v = pafy.get_playlist(urls[0]+"?t="+str(int(time.time()-t0)))        v = pafy.new(urls[0]+"?t="+str(int(time.time()-t0)))        media = instance_vlc.media_new(v.getbest().url)        player_vlc.set_media(media)        player_vlc.play()    print iprint mediafor url in urls:    v = pafy.new(urls[0])    print v.getbest().url"""#pafy.get_playlist()plurl = "https://www.youtube.com/watch?v=oS2j-sY9V8Y&list=RDoS2j-sY9V8Y&spfreload=10#t=216"playlist = pafy.get_playlist(plurl)playlist['title']playlist['author']len(playlist['items'])playlist['items'][21]['pafy']playlist['items'][21]['pafy'].audiostreamsplaylist['items'][21]['pafy'].getbest()playlist['items'][21]['pafy'].getbest().urlYOUTUBE_URL ="https://www.youtube.com/results?search_query="import urllibimport urllib2from bs4 import BeautifulSoupimport youtube_dlimport threadingimport vlcimport pafyimport pafyimport timeclass youtube_player:    def __init__(self, instance_vlc, player_vlc):        self.instance_vlc = instance_vlc        self.player_vlc = player_vlc        self.songs_url = []        self.old_songs = []        self.run = True    def search_youtube_urls(self,text_to_search):        query = urllib.quote(text_to_search)        url = YOUTUBE_URL + query        response = urllib2.urlopen(url)        html = response.read()        soup = BeautifulSoup(html)        urls = []        for vid in soup.findAll(attrs={'class':'yt-uix-tile-link'}):            urls.append('https://www.youtube.com' + vid['href'])            def generate_urls_list(self, text_to_search, playlist = True)):        urls = self.query_youtube_video(textToSearch)        for purl in urls:            playlist = pafy.get_playlist(plurl)            for i_video in range(len(playlist['items'])):                v = playlist['items'][i_video]['pafy']                self.songs_url.append(v.getbest().url)        self.old_songs = []    def play_youtube_playlist(self, request):        if "playlist" not in request:            text_to_search = 'playlist '+request        self.generate_urls_list(text_to_search, playlist=True)        self.play_songs()    def play_songs(self):        while len(self.songs_url) and self.run:            url = self.songs_url.pop(0)            self.old_songs.append(url)            media = self.instance_vlc.media_new(url)            self.player_vlc.set_media(media)            self.player_vlc.play()            for j in range(v.length):                if not self.player_vlc.is_playing() or not self.run:                    break                time.sleep(1)            time.sleep(PAUSE)    def next_song(self):        self.player_vlc.stop()        self.run = False        self.play_songs()    def previous_song(self):        self.player_vlc.stop()        self.run = False        self.songs_url = self.old_songs[-1:] + self.songs_url        self.play_songs()    def add_simple_song(self, request):        url = query_youtube_video(textToSearch)[0]        v = pafy.new(url)        media = instance_vlc.media_new(v.getbest().url)        player_vlc.set_media(media)        player_vlc.play()    def increase_volume(self):        volume = player_vlc.audio_get_volume()        self.player_vlc.audio_set_volume(min(volume +10,100))    def decrease_volume(self):        volume = player_vlc.audio_get_volume()        self.player_vlc.audio_set_volume(max(volume -10,0))    def play_youtube_playlist_background(self):        self.thread = threading.Thread(target=play_youtube_playlist, args=("Jose Luis Perales",instance_vlc,player_vlc))        self.thread.start()instance_vlc = vlc.Instance()player_vlc = instance_vlc.media_player_new()PAUSE = 2        